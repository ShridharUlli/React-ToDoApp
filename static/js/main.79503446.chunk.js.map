{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","doneTasks","todovalue","id","Date","now","value","isDone","strike","this","push","setState","updatedList","filter","item","input","forEach","listItem","doneList","length","className","onClick","addItem","type","placeholder","onChange","e","updateInput","target","map","textDecoration","key","name","checked","doneTask","style","deleteItem","icon","faTrash","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAkJeA,G,kBA3Ib,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,GACNC,UAAW,GALI,E,qEASXC,GACN,GAAkB,KAAdA,EAAkB,CACpB,IAAMH,EAAU,CACdI,GAAIC,KAAKC,MACTC,MAAOJ,EACPK,QAAQ,EACRC,OAAQ,QAEJR,EAAI,YAAOS,KAAKX,MAAME,MAC5BA,EAAKU,KAAKX,GACVU,KAAKE,SAAS,CACZZ,QAAS,GACTC,Y,iCAKKG,GACT,IACMS,EADOH,KAAKX,MAAME,KACCa,QAAO,SAAAC,GAAI,OAAIA,EAAKX,KAAOA,KACpDM,KAAKE,SAAS,CACZX,KAAMY,M,kCAIEG,GACVN,KAAKE,SAAS,CACZZ,QAASgB,M,+BAIJD,GACP,IAAMd,EAAOS,KAAKX,MAAME,KAExBA,EAAKgB,SAAQ,SAAAC,GACPA,EAASd,KAAOW,EAAKX,MACC,IAApBc,EAASV,QACXU,EAASV,QAAS,EAClBU,EAAST,OAAS,iBAElBS,EAASV,QAAS,EAClBU,EAAST,OAAS,YAKxB,IAAMU,EAAWlB,EAAKa,QAAO,SAAAC,GAAI,OAAoB,IAAhBA,EAAKP,UAAiBY,OAE3DV,KAAKE,SAAS,CACZX,OACAC,UAAWiB,M,+BAIL,IAAD,OACP,OACE,yBAAKE,UAAU,OACb,wBAAIA,UAAU,mBAAd,kBACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,6BACb,4BACEA,UAAU,uBACVC,QAAS,kBAAM,EAAKC,QAAQ,EAAKxB,MAAMC,WAFzC,OAMA,0BAAMqB,UAAU,wBACd,2BACEG,KAAK,OACLH,UAAU,kBACVI,YAAY,aACZlB,MAAOG,KAAKX,MAAMC,QAClB0B,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOtB,YAK/C,yBAAKc,UAAU,4BACb,wBAAIA,UAAU,uBACXX,KAAKX,MAAME,KAAK6B,KAAI,SAAAf,GACnB,IAAMN,EAAS,CACbsB,eAAgBhB,EAAKN,QAEvB,OACE,wBAAIY,UAAU,iBAAiBW,IAAKjB,EAAKX,IACvC,2BACEoB,KAAK,WACLS,KAAK,GACL7B,GAAG,GACHiB,UAAU,qBACVa,QAASnB,EAAKP,OACdkB,SAAU,kBAAM,EAAKS,SAASpB,MAGhC,0BAAMqB,MAAO3B,GAAb,IAAuBM,EAAKR,OAE5B,4BACEc,UAAU,0BACVC,QAAS,kBAAM,EAAKe,WAAWtB,EAAKX,MAEpC,kBAAC,IAAD,CAAiBkC,KAAMC,cAQrC,yBAAKlB,UAAU,+BACb,uBAAGA,UAAU,qBACV,IADH,qBAEoB,+BAAKX,KAAKX,MAAME,KAAKmB,OAArB,KAAkC,KAEtD,uBAAGC,UAAU,qBACV,IADH,qBAEoB,2BAAIX,KAAKX,MAAMG,WAAe,OAItD,yBAAKmB,UAAU,oBACb,wDAC4B,mD,GApIpBmB,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.79503446.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: [],\n      doneTasks: 0\n    };\n  }\n\n  addItem(todovalue) {\n    if (todovalue !== \"\") {\n      const newItem = {\n        id: Date.now(),\n        value: todovalue,\n        isDone: false,\n        strike: \"none\"\n      };\n      const list = [...this.state.list];\n      list.push(newItem);\n      this.setState({\n        newItem: \"\",\n        list\n      });\n    }\n  }\n\n  deleteItem(id) {\n    const list = this.state.list;\n    const updatedList = list.filter(item => item.id !== id);\n    this.setState({\n      list: updatedList\n    });\n  }\n\n  updateInput(input) {\n    this.setState({\n      newItem: input\n    });\n  }\n\n  doneTask(item) {\n    const list = this.state.list;\n\n    list.forEach(listItem => {\n      if (listItem.id === item.id) {\n        if (listItem.isDone === false) {\n          listItem.isDone = true;\n          listItem.strike = \"line-through\";\n        } else {\n          listItem.isDone = false;\n          listItem.strike = \"none\";\n        }\n      }\n    });\n\n    const doneList = list.filter(item => item.isDone === true).length;\n\n    this.setState({\n      list,\n      doneTasks: doneList\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1 className=\"app-to-do-title\">To-Do List App</h1>\n        <div className=\"app-to-do\">\n          <div className=\"app-to-do-container\">\n            <div className=\"app-to-do-input-container\">\n              <button\n                className=\"app-to-do-button-add\"\n                onClick={() => this.addItem(this.state.newItem)}\n              >\n                Add\n              </button>\n              <span className=\"app-to-do-input-span\">\n                <input\n                  type=\"text\"\n                  className=\"app-to-do-input\"\n                  placeholder=\"Your To-Do\"\n                  value={this.state.newItem}\n                  onChange={e => this.updateInput(e.target.value)}\n                />\n              </span>\n            </div>\n\n            <div className=\"app-to-do-list-container\">\n              <ul className=\"app-to-do-item-list\">\n                {this.state.list.map(item => {\n                  const strike = {\n                    textDecoration: item.strike\n                  };\n                  return (\n                    <li className=\"app-to-do-item\" key={item.id}>\n                      <input\n                        type=\"checkbox\"\n                        name=\"\"\n                        id=\"\"\n                        className=\"app-to-do-checkbox\"\n                        checked={item.isDone}\n                        onChange={() => this.doneTask(item)}\n                      />\n\n                      <span style={strike}> {item.value}</span>\n\n                      <button\n                        className=\"app-to-do-button-delete\"\n                        onClick={() => this.deleteItem(item.id)}\n                      >\n                        <FontAwesomeIcon icon={faTrash} />\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </div>\n          <div className=\"app-to-do-details-container\">\n            <p className=\"app-to-do-details\">\n              {\" \"}\n              Number of tasks : <b> {this.state.list.length} </b>{\" \"}\n            </p>\n            <p className=\"app-to-do-details\">\n              {\" \"}\n              Tasks Completed : <b>{this.state.doneTasks}</b>{\" \"}\n            </p>\n          </div>\n        </div>\n        <div className=\"app-to-do-footer\">\n          <p>\n            Designed and Developed by <b>@shridharulli</b>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}