{"version":3,"sources":["components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","console","log","this","props","className","key","item","id","type","name","checked","isDone","onChange","doneTask","style","strike","value","onClick","deleteItem","icon","faTrash","React","Component","App","state","newItem","list","doneTasks","addItem","bind","updateInput","todovalue","Date","now","push","setState","updatedList","filter","input","forEach","listItem","doneList","length","placeholder","e","target","map","textDecoration","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4eef928b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass TodoItem extends React.Component{\r\nrender(){\r\n    console.log(this.props);\r\n    return(\r\n        <li className=\"app-to-do-item\" key={this.props.item.id}>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        name=\"\"\r\n                        id=\"\"\r\n                        className=\"app-to-do-checkbox\"\r\n                        checked={this.props.item.isDone}\r\n                        onChange={() => this.props.doneTask(this.props.item)}\r\n                      />\r\n\r\n                      <span style={this.props.strike}> {this.props.item.value}</span>\r\n\r\n                      <button\r\n                        className=\"app-to-do-button-delete\"\r\n                        onClick={() => this.props.deleteItem(this.props.item.id)}\r\n                      >\r\n                        <FontAwesomeIcon icon={faTrash} />\r\n                      </button>\r\n                    </li>\r\n    );\r\n}\r\n}\r\n\r\nexport default  TodoItem;\r\n","import React from \"react\";\nimport TodoItem from \"./components/TodoItem\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: [],\n      doneTasks: 0\n    };\n    this.addItem = this.addItem.bind(this);\n    this.doneTask = this.doneTask.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.updateInput = this.updateInput.bind(this);\n  }\n\n\n  addItem(todovalue) {\n    if (todovalue !== \"\") {\n      const newItem = {\n        id: Date.now(),\n        value: todovalue,\n        isDone: false,\n        strike: \"none\"\n      };\n      const list = [...this.state.list];\n      list.push(newItem);\n      this.setState({\n        newItem: \"\",\n        list\n      });\n    }\n  }\n\n  deleteItem(id) {\n    const list = this.state.list;\n    const updatedList = list.filter(item => item.id !== id);\n    this.setState({\n      list: updatedList\n    });\n  }\n\n  updateInput(input) {\n    this.setState({\n      newItem: input\n    });\n  }\n\n  doneTask(item) {\n    const list = this.state.list;\n\n    list.forEach(listItem => {\n      if (listItem.id === item.id) {\n        if (listItem.isDone === false) {\n          listItem.isDone = true;\n          listItem.strike = \"line-through\";\n        } else {\n          listItem.isDone = false;\n          listItem.strike = \"none\";\n        }\n      }\n    });\n\n    const doneList = list.filter(item => item.isDone === true).length;\n\n    this.setState({\n      list,\n      doneTasks: doneList\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1 className=\"app-to-do-title\">To-Do List App</h1>\n        \n        <div className=\"app-to-do\">\n          <div className=\"app-to-do-container\">\n            <div className=\"app-to-do-input-container\">\n              <button\n                className=\"app-to-do-button-add\"\n                onClick={() => this.addItem(this.state.newItem)}\n              >\n                Add\n              </button>\n              <span className=\"app-to-do-input-span\">\n                <input\n                  type=\"text\"\n                  className=\"app-to-do-input\"\n                  placeholder=\"Your To-Do\"\n                  value={this.state.newItem}\n                  onChange={e => this.updateInput(e.target.value)}\n                />\n              </span>\n            </div>\n\n            <div className=\"app-to-do-list-container\">\n              <ul className=\"app-to-do-item-list\">\n                {this.state.list.map(item => {\n                  const strike = {\n                    textDecoration: item.strike\n                  };\n                  return (\n                    <TodoItem\n                    item={item}\n                    id={item.id}\n                    isDone={item.isDone}\n                    value={item.value}\n                    strike={strike}\n                    doneTask={this.doneTask}\n                    deleteItem={this.deleteItem}\n                    >\n                    </TodoItem>\n                  );\n                })}\n              </ul>\n            </div>\n          </div>\n          <div className=\"app-to-do-details-container\">\n            <p className=\"app-to-do-details\">\n              {\" \"}\n              Number of tasks : <b> {this.state.list.length} </b>{\" \"}\n            </p>\n            <p className=\"app-to-do-details\">\n              {\" \"}\n              Tasks Completed : <b>{this.state.doneTasks}</b>{\" \"}\n            </p>\n          </div>\n        </div>\n        <div className=\"app-to-do-footer\">\n          <p>\n            Designed and Developed by{\" \"}\n            <b>\n              <a\n                className=\"app-to-do-link\"\n                href=\"https://shridharulli.github.io\"\n                target=\"_blank\"\n              >\n                @shridharulli\n              </a>\n            </b>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}